{
	"name": "adam_spb",
	"properties": {
		"folder": {
			"name": "Adams_feedback"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "75c13fd3-17b3-4009-8d3c-b433c44ca31f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# ---------------------------------------------\r\n",
					"# Import Needed Functions\r\n",
					"# ---------------------------------------------\r\n",
					"from pyspark.sql import functions as F, types as T\r\n",
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"# ---------------------------------------------\r\n",
					"# Configuration Section\r\n",
					"# ---------------------------------------------\r\n",
					"\r\n",
					"storage_account = \"louisstr\"\r\n",
					"\r\n",
					"# Construct the base Delta Lake path\r\n",
					"base_delta_path = f\"abfss://curated@{storage_account}.dfs.core.windows.net/ESHT/ECDS/\"\r\n",
					"\r\n",
					"# ---------------------------------------------\r\n",
					"# Function to Create and Register Delta Tables\r\n",
					"# ---------------------------------------------\r\n",
					"\r\n",
					"def create_and_register_delta_table(table_name, schema, table_suffix):\r\n",
					"    \"\"\"\r\n",
					"    Creates and registers a Delta table.\r\n",
					"\r\n",
					"    :param table_name: Name of the table to register in the metastore.\r\n",
					"    :param schema: StructType schema of the DataFrame.\r\n",
					"    :param table_suffix: Suffix to append to the base path for the Delta table.\r\n",
					"    \"\"\"\r\n",
					"    # Define the Delta table path\r\n",
					"    delta_table_path = f\"{base_delta_path}/{table_suffix}\"\r\n",
					"\r\n",
					"    # Create an empty DataFrame with the defined schema\r\n",
					"    df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"    # Write the DataFrame as a Delta table to initialize it\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)\r\n",
					"\r\n",
					"    # Register the table in the metastore\r\n",
					"    spark.sql(f\"\"\"\r\n",
					"        CREATE TABLE IF NOT EXISTS {table_name}\r\n",
					"        USING DELTA\r\n",
					"        LOCATION '{delta_table_path}'\r\n",
					"    \"\"\")\r\n",
					"\r\n",
					"# ---------------------------------------------\r\n",
					"# Define Schemas for Each Table\r\n",
					"# ---------------------------------------------\r\n",
					"\r\n",
					"# Schema for LiveAE_Attends_tbl\r\n",
					"schema_liveae_attends = T.StructType([\r\n",
					"    T.StructField(\"visitarchiveid\", T.IntegerType(), nullable=False),\r\n",
					"    T.StructField(\"SiteDesc\", T.StringType(), nullable=True),\r\n",
					"    # ... (other fields)\r\n",
					"    T.StructField(\"AmendOn\", T.TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Schema for LiveAE_InDept_tbl\r\n",
					"schema_liveae_indept = T.StructType([\r\n",
					"    T.StructField(\"visitarchiveid\", T.IntegerType(), nullable=False),\r\n",
					"    T.StructField(\"SiteDesc\", T.StringType(), nullable=True),\r\n",
					"    # ... (other fields)\r\n",
					"    T.StructField(\"AmendOn\", T.TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Schema for LiveAE_InDeptbyHour_tbl\r\n",
					"schema_liveae_indeptbyhour = T.StructType([\r\n",
					"    T.StructField(\"Hr\", T.TimestampType(), nullable=True),\r\n",
					"    T.StructField(\"SiteCode\", T.StringType(), nullable=True),\r\n",
					"    T.StructField(\"InDept\", T.IntegerType(), nullable=True),\r\n",
					"    T.StructField(\"TimeV\", T.TimestampType(), nullable=True),\r\n",
					"    T.StructField(\"InsertedOn\", T.TimestampType(), nullable=True),\r\n",
					"    T.StructField(\"AmendOn\", T.TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# ---------------------------------------------\r\n",
					"# Create and Register Delta Tables\r\n",
					"# ---------------------------------------------\r\n",
					"\r\n",
					"create_and_register_delta_table(\r\n",
					"    table_name=\"LiveAE_Attends_tbl\",\r\n",
					"    schema=schema_liveae_attends,\r\n",
					"    table_suffix=\"LiveAE_Attends_tbl\"\r\n",
					")\r\n",
					"\r\n",
					"create_and_register_delta_table(\r\n",
					"    table_name=\"LiveAE_InDept_tbl\",\r\n",
					"    schema=schema_liveae_indept,\r\n",
					"    table_suffix=\"LiveAE_InDept_tbl\"\r\n",
					")\r\n",
					"\r\n",
					"create_and_register_delta_table(\r\n",
					"    table_name=\"LiveAE_InDeptbyHour_tbl\",\r\n",
					"    schema=schema_liveae_indeptbyhour,\r\n",
					"    table_suffix=\"LiveAE_InDeptbyHour_tbl\"\r\n",
					")\r\n",
					""
				],
				"execution_count": null
			}
		]
	}
}